  <!-- Waht is Metadat -->
Metadata is data about data. For a product like a shirt, metadata includes all descriptive, structural, and behavioral attributes that help:
Store,Search,FilterRecommand etc

<!-- ---------------------------High Level Design--------------------------: -->

                                Database Design :


<!-- Product Table: -->

 Field: id,   title,  description,  brand_id,  category_id, etc.

<!-- Variant Table: -->

 Field:  variant_id,  product_id,  color, size,  price,  stock, etc.

<!-- Image Table: -->

 Field:  image_id,  product_id,  url, type

<!-- Review Table: -->

 Field:  review_id,  user_id,  product_id, rating, comment, etc.



<!-- DB Choice:  -->
PostgreSQL or MySQL for structured metadata (ACID), MongoDB for flexible catalogs (NoSQL)


<!-- ------------------------------------ER Table and Relaltionship----------------------------: -->

<!-- -- âœ… 1. Brands Table -->


CREATE TABLE brands (
  id UUID PRIMARY KEY,
  name TEXT NOT NULL UNIQUE,
  description TEXT
);

<!-- -- âœ… 2. Categories Table  -->

CREATE TABLE categories (
  id UUID PRIMARY KEY,
  name TEXT NOT NULL,
  parent_id UUID REFERENCES categories(id) -- self-referencing for subcategories
);

<!-- -- âœ… 3. Products Table -->

CREATE TABLE products (
  id UUID PRIMARY KEY,
  title TEXT NOT NULL,
  description TEXT,
  brand_id UUID REFERENCES brands(id),
  category_id UUID REFERENCES categories(id),
  slug TEXT UNIQUE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

<!-- -- âœ… 4. Variants Table (e.g., color-size combinations of a product) -->

CREATE TABLE variants (
  id UUID PRIMARY KEY,
  product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  size TEXT NOT NULL,
  color TEXT NOT NULL,
  price NUMERIC(10, 2) NOT NULL,
  discount_price NUMERIC(10, 2),
  stock_quantity INT DEFAULT 0,
  sku TEXT UNIQUE,
  weight_grams INT,
  is_active BOOLEAN DEFAULT TRUE
);

<!-- -- âœ… 5. Images Table (supports both product-level and variant-level images) -->

CREATE TABLE images (
  id UUID PRIMARY KEY,
  product_id UUID REFERENCES products(id) ON DELETE CASCADE,
  variant_id UUID REFERENCES variants(id),
  url TEXT NOT NULL,
  type TEXT CHECK (type IN ('main', 'thumbnail', 'variant')),
  position INT DEFAULT 0
);

<!-- -- âœ… 6. Users Table (minimal for review authors) -->

CREATE TABLE users (
  id UUID PRIMARY KEY,
  name TEXT,
  email TEXT UNIQUE,
  password TEXT
);

<!-- -- âœ… 7. Reviews Table (1 review per product by user) -->

CREATE TABLE reviews (
  id UUID PRIMARY KEY,
  user_id UUID REFERENCES users(id),
  product_id UUID NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  rating INT CHECK (rating BETWEEN 1 AND 5),
  comment TEXT,
  created_at TIMESTAMP DEFAULT NOW()
);


<!-- ðŸ”„ Relationships Summary -->


From Table	Column	â†’ To Table	Relationship

products	brand_id	brands.id	Many-to-One

products	category_id	categories.id	Many-to-One

variants	product_id	products.id	Many-to-One

images	product_id	products.id	Many-to-One

images	variant_id	variants.id	Many-to-One

reviews	product_id	products.id	Many-to-One

reviews	user_id	users.id	Many-to-One



// product.controller.ts
import { Request, Response } from 'express';

import prisma from '../prisma';

export const createProduct = async (req: Request, res: Response) => {


  try {

    const { title, description, brandId, categoryId, variants, images } = req.body;


    const product = await prisma.product.create({

      data: {

        title,
        description,

        brandId,

        categoryId,

        variants: {
          create: variants.map(v => ({
            size: v.size,

            color: v.color,

            price: v.price,
            discountPrice: v.discountPrice,
            stockQuantity: v.stockQuantity,
            sku: v.sku,
            weightGrams: v.weightGrams,
          })),
        },
        images: {
          create: images.map(i => ({

            url: i.url,

            type: i.type,

            position: i.position
          })),
        }


      },

      include: { variants: true, images: true }
    });

    res.status(201).json(product);
  } catch (err) {

    console.error('Error creating product:', err);

    res.status(500).json({ error: 'Internal server error' });
  }
};


-- Filter API: 

export const filterProducts = async (req: Request, res: Response) => {

  const { color, size, maxPrice } = req.query;


  const products = await prisma.product.findMany({

    where: {

      variants: {

        some: {

          color: color as string,

          size: size as string,

          price: { lte: Number(maxPrice) }
        }
      }
    },
    include: {
       variants: true, brand: true,
        category: true }
  });

  res.json(products);
};


-- ratting

export const getAverageRating = async (req: Request, res: Response) => {

  const productId = req.params.id;

  const result = await prisma.review.aggregate({

    _avg: {

      rating: true

    },
    where: { productId }

  });


  res.json({ 
    avgRating: result._avg.rating ?? 0 
  });
};
